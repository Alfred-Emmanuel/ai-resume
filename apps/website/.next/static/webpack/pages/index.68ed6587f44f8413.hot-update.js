"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./src/services/api.ts":
/*!*****************************!*\
  !*** ./src/services/api.ts ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   apiService: function() { return /* binding */ apiService; }\n/* harmony export */ });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants */ \"./src/constants/index.ts\");\n// API service layer for backend communication\n\nclass ApiService {\n    async request(endpoint) {\n        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        try {\n            const response = await fetch(\"\".concat(this.baseUrl).concat(endpoint), {\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    ...options.headers\n                },\n                ...options\n            });\n            const contentType = response.headers.get(\"content-type\") || \"\";\n            let data = null;\n            if (response.status !== 204) {\n                if (contentType.includes(\"application/json\")) {\n                    data = await response.json();\n                } else {\n                    // Fallback for non-JSON (e.g., HTML error pages / empty bodies)\n                    const text = await response.text();\n                    data = text;\n                }\n            }\n            if (!response.ok) {\n                const errorMessage = data && typeof data === \"object\" && \"error\" in data && data.error || typeof data === \"string\" && data || \"Request failed\";\n                return {\n                    error: errorMessage\n                };\n            }\n            return {\n                data\n            };\n        } catch (error) {\n            return {\n                error: error instanceof Error ? error.message : \"Network error\"\n            };\n        }\n    }\n    async authenticatedRequest(endpoint, token) {\n        let options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n        return this.request(endpoint, {\n            ...options,\n            headers: {\n                Authorization: \"Bearer \".concat(token),\n                ...options.headers\n            }\n        });\n    }\n    // Resume endpoints\n    async uploadResume(file, token) {\n        const formData = new FormData();\n        formData.append(\"resume\", file);\n        try {\n            const response = await fetch(\"\".concat(this.baseUrl, \"/resumes/upload\"), {\n                method: \"POST\",\n                headers: {\n                    Authorization: \"Bearer \".concat(token)\n                },\n                body: formData\n            });\n            const data = await response.json();\n            if (!response.ok) {\n                return {\n                    error: data.error || \"Upload failed\"\n                };\n            }\n            return {\n                data\n            };\n        } catch (error) {\n            return {\n                error: error instanceof Error ? error.message : \"Upload failed\"\n            };\n        }\n    }\n    async getResumes(token) {\n        return this.authenticatedRequest(\"/resumes/\", token);\n    }\n    async getResume(id, token) {\n        return this.authenticatedRequest(\"/resumes/\".concat(id), token);\n    }\n    async deleteResume(id, token) {\n        return this.authenticatedRequest(\"/resumes/\".concat(id), token, {\n            method: \"DELETE\"\n        });\n    }\n    async updateResumeSections(id, sections, token) {\n        return this.authenticatedRequest(\"/resumes/\".concat(id, \"/sections\"), token, {\n            method: \"PUT\",\n            body: JSON.stringify({\n                sections\n            })\n        });\n    }\n    // Auth endpoints\n    async verifyToken(idToken) {\n        return this.request(\"/auth/verify\", {\n            method: \"POST\",\n            body: JSON.stringify({\n                idToken\n            })\n        });\n    }\n    async getHealth() {\n        return this.request(\"/auth/health\");\n    }\n    // PDF Parser endpoints\n    async uploadResumeToPDFParser(file, token) {\n        const formData = new FormData();\n        formData.append(\"resume\", file);\n        try {\n            const response = await fetch(\"\".concat(this.baseUrl, \"/pdf-parser/upload-resume\"), {\n                method: \"POST\",\n                headers: {\n                    Authorization: \"Bearer \".concat(token)\n                },\n                body: formData\n            });\n            const data = await response.json();\n            if (!response.ok) {\n                return {\n                    error: data.error || \"PDF parsing failed\"\n                };\n            }\n            return {\n                data\n            };\n        } catch (error) {\n            return {\n                error: error instanceof Error ? error.message : \"PDF parsing failed\"\n            };\n        }\n    }\n    async getPDFParserHealth() {\n        return this.request(\"/pdf-parser/health\");\n    }\n    async getPDFParserStatus() {\n        return this.request(\"/pdf-parser/status\");\n    }\n    // Generation endpoints\n    async generateResume(resumeId, jobId, options, token) {\n        return this.authenticatedRequest(\"/generate/resume\", token, {\n            method: \"POST\",\n            body: JSON.stringify({\n                resume_id: resumeId,\n                job_id: jobId,\n                options\n            })\n        });\n    }\n    async generateCoverLetter(resumeId, jobId, options, token) {\n        return this.authenticatedRequest(\"/generate/coverletter\", token, {\n            method: \"POST\",\n            body: JSON.stringify({\n                resume_id: resumeId,\n                job_id: jobId,\n                options\n            })\n        });\n    }\n    // Job endpoints\n    async getJobs(token) {\n        return this.authenticatedRequest(\"/jobs/\", token);\n    }\n    async captureJob(jobData, token) {\n        return this.authenticatedRequest(\"/jobs/capture\", token, {\n            method: \"POST\",\n            body: JSON.stringify(jobData)\n        });\n    }\n    constructor(baseUrl = _constants__WEBPACK_IMPORTED_MODULE_0__.API_BASE_URL){\n        this.baseUrl = baseUrl;\n    }\n}\n// Export singleton instance\nconst apiService = new ApiService();\n/* harmony default export */ __webpack_exports__[\"default\"] = (apiService);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/services/api.ts\n"));

/***/ })

});