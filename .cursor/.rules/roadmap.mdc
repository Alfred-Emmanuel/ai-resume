---
alwaysApply: true
---
## 24) Dev environment & local testing

**Local stack recommendations**

* Use Docker Compose for local DB (Postgres), Redis, and MinIO (S3-compatible) for fast local development.
* Mock LLM using a lightweight stub that returns deterministic rewrites until you're ready to connect to OpenAI/Anthropic.

**Test data**

* Include a set of 20 diverse resumes (academic, corporate, creative, multi-column PDFs) to validate parser.

---

## 25) Observability: events to capture

* `resume_uploaded` (user\_id, resume\_id)
* `job_captured` (user\_id, job\_id, source)
* `generation_requested` (user\_id, generation\_id, model)
* `generation_completed` (generation\_id, latency\_ms)
* `downloaded` (generation\_id, user\_id)
* `billing_event` (user\_id, plan, event)

Map these to dashboards (Grafana / Datadog) and retention (30/90/365 days depending on cost).

---



## 28) Marketing & growth playbook

* Content marketing: blog posts on "How to beat the ATS" with sample before/after resumes.
* Partnerships: career coaches, university career centers.
* Product-led growth: free plan with 1-3 trial generations + refer-a-friend credits.
* SEO: landing pages targeting "ATS resume tool", "LinkedIn resume tailor", and city/role variants.

## 31) Sample README (for repo root)

```
# ai-resume-extension
Monorepo with packages: web (Next.js), extension (React), backend (NestJS / Express), workers.

## Local dev
1. Copy `.env.example` to `.env`
2. `docker-compose up` (Postgres, Redis, MinIO)
3. `pnpm install` at repo root
4. `pnpm dev` (starts web, backend, workers)

## Testing
- Unit: `pnpm test`
- E2E: `pnpm e2e`
```

---

## 32) Next actions & recommended priorities (what to start with now)

1. Define canonical resume JSON and parsing heuristics; create parser tests with sample resumes.
2. Build an API + minimal UI to upload a resume and view parsed canonical JSON.
3. Implement a basic extension popup that can extract job text client-side and send to the API.
4. Hook up an LLM stub for resume rewriting and test end-to-end generation (text only) before adding file export.
5. Add DOCX/PDF rendering after textual generation is stable.
6. Integrate payments and launch closed beta.

---